<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="335" failures="57" errors="0" time="113.498040083">
    <testsuite name="test/smoke/cli-basics.test.ts" timestamp="2025-07-04T09:50:29.097Z" hostname="Carls-MBP-H.home" tests="8" failures="3" errors="0" skipped="0" time="3.116787208">
        <testcase classname="test/smoke/cli-basics.test.ts" name="CLI Smoke Tests &gt; should show version" time="0.078728666">
        </testcase>
        <testcase classname="test/smoke/cli-basics.test.ts" name="CLI Smoke Tests &gt; should show help" time="0.048097292">
        </testcase>
        <testcase classname="test/smoke/cli-basics.test.ts" name="CLI Smoke Tests &gt; should list available commands" time="0.055448458">
            <failure message="expected &apos;Usage: autoagent [options] [command]\…&apos; to contain &apos;list&apos;" type="AssertionError">
AssertionError: expected &apos;Usage: autoagent [options] [command]\…&apos; to contain &apos;list&apos;

- Expected
+ Received

- list
+ Usage: autoagent [options] [command]
+
+ Run autonomous AI agents for task execution
+
+ Options:
+   -V, --version                    output the version number
+   -h, --help                       display help for command
+
+ Commands:
+   config                           Manage configuration
+   run [options]                    Run the next issue or all issues
+   create [options] &lt;title&gt;         Create a new issue
+   status [options]                 Show current status
+   check [options]                  Check provider availability
+   bootstrap [options] [plan-file]  Create initial issue from master plan
+   help [command]                   display help for command
+

 ❯ test/smoke/cli-basics.test.ts:28:22
 ❯ test/smoke/cli-basics.test.ts:27:14
            </failure>
        </testcase>
        <testcase classname="test/smoke/cli-basics.test.ts" name="CLI Smoke Tests &gt; should handle invalid command gracefully" time="0.053840292">
            <failure message="expected &apos;error: unknown command \&apos;invalid-comm…&apos; to contain &apos;Unknown command&apos;" type="AssertionError">
AssertionError: expected &apos;error: unknown command \&apos;invalid-comm…&apos; to contain &apos;Unknown command&apos;

- Expected
+ Received

- Unknown command
+ error: unknown command &apos;invalid-command&apos;
+

 ❯ test/smoke/cli-basics.test.ts:38:59
            </failure>
        </testcase>
        <testcase classname="test/smoke/cli-basics.test.ts" name="CLI Smoke Tests &gt; should show config help without error" time="0.056836166">
            <failure message="expected &apos;Usage: autoagent config [options] [co…&apos; to contain &apos;get&apos;" type="AssertionError">
AssertionError: expected &apos;Usage: autoagent config [options] [co…&apos; to contain &apos;get&apos;

- Expected
+ Received

- get
+ Usage: autoagent config [options] [command]
+
+ Manage configuration
+
+ Options:
+   -h, --help                              display help for command
+
+ Commands:
+   init [options]                          Initialize configuration
+   set-provider [options] &lt;provider&gt;       Set default AI provider (claude or gemini)
+   set-failover [options] &lt;providers...&gt;   Set failover providers in order of preference
+   set-auto-commit [options] &lt;enabled&gt;     Enable or disable automatic git commits (true/false)
+   set-co-authored-by [options] &lt;enabled&gt;  Include AI co-authorship in commits (true/false)
+   show                                    Show current configuration
+   clear-limits [options]                  Clear rate limit records
+   help [command]                          display help for command
+

 ❯ test/smoke/cli-basics.test.ts:45:20
            </failure>
        </testcase>
        <testcase classname="test/smoke/cli-basics.test.ts" name="CLI Smoke Tests &gt; should show status without error" time="1.96509175">
        </testcase>
        <testcase classname="test/smoke/cli-basics.test.ts" name="CLI Environment Smoke Tests &gt; should detect Node.js version" time="0.017840625">
        </testcase>
        <testcase classname="test/smoke/cli-basics.test.ts" name="CLI Environment Smoke Tests &gt; should have required runtime dependencies" time="0.839823625">
        </testcase>
    </testsuite>
    <testsuite name="test/smoke/provider-check.test.ts" timestamp="2025-07-04T09:50:29.101Z" hostname="Carls-MBP-H.home" tests="9" failures="0" errors="0" skipped="0" time="2.222440208">
        <testcase classname="test/smoke/provider-check.test.ts" name="Provider Availability Smoke Tests &gt; should load Claude provider" time="0.001150709">
        </testcase>
        <testcase classname="test/smoke/provider-check.test.ts" name="Provider Availability Smoke Tests &gt; should load Gemini provider" time="0.000246375">
        </testcase>
        <testcase classname="test/smoke/provider-check.test.ts" name="Provider Availability Smoke Tests &gt; should load Mock provider" time="0.000212292">
        </testcase>
        <testcase classname="test/smoke/provider-check.test.ts" name="Provider Availability Smoke Tests &gt; should check Claude availability without crashing" time="0.525402042">
        </testcase>
        <testcase classname="test/smoke/provider-check.test.ts" name="Provider Availability Smoke Tests &gt; should check Gemini availability without crashing" time="0.568094542">
        </testcase>
        <testcase classname="test/smoke/provider-check.test.ts" name="Provider Availability Smoke Tests &gt; should always have Mock provider available" time="0.000353833">
        </testcase>
        <testcase classname="test/smoke/provider-check.test.ts" name="Provider Factory Smoke Tests &gt; should create providers via factory" time="0.003625708">
        </testcase>
        <testcase classname="test/smoke/provider-check.test.ts" name="Provider Factory Smoke Tests &gt; should get available providers without crashing" time="0.606779708">
        </testcase>
        <testcase classname="test/smoke/provider-check.test.ts" name="Provider Factory Smoke Tests &gt; should get first available provider" time="0.515655334">
        </testcase>
    </testsuite>
    <testsuite name="test/e2e/cli/config.test.ts" timestamp="2025-07-04T09:50:29.103Z" hostname="Carls-MBP-H.home" tests="8" failures="8" errors="0" skipped="0" time="0.853983">
        <testcase classname="test/e2e/cli/config.test.ts" name="autoagent config &gt; config show &gt; should display all configuration values" time="0.122862333">
            <failure message="Failed to initialize project: error: unknown command &apos;init&apos;
" type="Error">
Error: Failed to initialize project: error: unknown command &apos;init&apos;

 ❯ initializeProject test/e2e/helpers/setup.ts:37:11
 ❯ test/e2e/cli/config.test.ts:10:7
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/config.test.ts" name="autoagent config &gt; config set-provider &gt; should update provider configuration" time="0.09964825">
            <failure message="Failed to initialize project: error: unknown command &apos;init&apos;
" type="Error">
Error: Failed to initialize project: error: unknown command &apos;init&apos;

 ❯ initializeProject test/e2e/helpers/setup.ts:37:11
 ❯ test/e2e/cli/config.test.ts:21:7
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/config.test.ts" name="autoagent config &gt; config set-provider &gt; should validate provider values" time="0.092651541">
            <failure message="Failed to initialize project: error: unknown command &apos;init&apos;
" type="Error">
Error: Failed to initialize project: error: unknown command &apos;init&apos;

 ❯ initializeProject test/e2e/helpers/setup.ts:37:11
 ❯ test/e2e/cli/config.test.ts:31:7
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/config.test.ts" name="autoagent config &gt; config set-auto-commit &gt; should update auto-commit configuration" time="0.095386917">
            <failure message="Failed to initialize project: error: unknown command &apos;init&apos;
" type="Error">
Error: Failed to initialize project: error: unknown command &apos;init&apos;

 ❯ initializeProject test/e2e/helpers/setup.ts:37:11
 ❯ test/e2e/cli/config.test.ts:42:7
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/config.test.ts" name="autoagent config &gt; config set-auto-commit &gt; should handle invalid boolean values" time="0.106084625">
            <failure message="Failed to initialize project: error: unknown command &apos;init&apos;
" type="Error">
Error: Failed to initialize project: error: unknown command &apos;init&apos;

 ❯ initializeProject test/e2e/helpers/setup.ts:37:11
 ❯ test/e2e/cli/config.test.ts:50:7
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/config.test.ts" name="autoagent config &gt; config set-failover &gt; should set failover providers" time="0.109856125">
            <failure message="Failed to initialize project: error: unknown command &apos;init&apos;
" type="Error">
Error: Failed to initialize project: error: unknown command &apos;init&apos;

 ❯ initializeProject test/e2e/helpers/setup.ts:37:11
 ❯ test/e2e/cli/config.test.ts:61:7
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/config.test.ts" name="autoagent config &gt; config clear-limits &gt; should clear all rate limits" time="0.111216875">
            <failure message="Failed to initialize project: error: unknown command &apos;init&apos;
" type="Error">
Error: Failed to initialize project: error: unknown command &apos;init&apos;

 ❯ initializeProject test/e2e/helpers/setup.ts:37:11
 ❯ test/e2e/cli/config.test.ts:71:7
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/config.test.ts" name="autoagent config &gt; config clear-limits &gt; should clear specific provider rate limit" time="0.115137958">
            <failure message="Failed to initialize project: error: unknown command &apos;init&apos;
" type="Error">
Error: Failed to initialize project: error: unknown command &apos;init&apos;

 ❯ initializeProject test/e2e/helpers/setup.ts:37:11
 ❯ test/e2e/cli/config.test.ts:79:7
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="test/e2e/cli/create.test.ts" timestamp="2025-07-04T09:50:29.105Z" hostname="Carls-MBP-H.home" tests="5" failures="5" errors="0" skipped="0" time="0.462318292">
        <testcase classname="test/e2e/cli/create.test.ts" name="autoagent create &gt; should create a new issue interactively" time="0.089014334">
            <failure message="Failed to initialize project: error: unknown command &apos;init&apos;
" type="Error">
Error: Failed to initialize project: error: unknown command &apos;init&apos;

 ❯ initializeProject test/e2e/helpers/setup.ts:37:11
 ❯ test/e2e/cli/create.test.ts:9:5
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/create.test.ts" name="autoagent create &gt; should create issue with command line arguments" time="0.092147584">
            <failure message="Failed to initialize project: error: unknown command &apos;init&apos;
" type="Error">
Error: Failed to initialize project: error: unknown command &apos;init&apos;

 ❯ initializeProject test/e2e/helpers/setup.ts:37:11
 ❯ test/e2e/cli/create.test.ts:23:5
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/create.test.ts" name="autoagent create &gt; should validate issue format" time="0.096037959">
            <failure message="Failed to initialize project: error: unknown command &apos;init&apos;
" type="Error">
Error: Failed to initialize project: error: unknown command &apos;init&apos;

 ❯ initializeProject test/e2e/helpers/setup.ts:37:11
 ❯ test/e2e/cli/create.test.ts:47:5
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/create.test.ts" name="autoagent create &gt; should generate unique issue filenames" time="0.095492125">
            <failure message="Failed to initialize project: error: unknown command &apos;init&apos;
" type="Error">
Error: Failed to initialize project: error: unknown command &apos;init&apos;

 ❯ initializeProject test/e2e/helpers/setup.ts:37:11
 ❯ test/e2e/cli/create.test.ts:56:5
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/create.test.ts" name="autoagent create &gt; should support template usage" time="0.088692416">
            <failure message="Failed to initialize project: error: unknown command &apos;init&apos;
" type="Error">
Error: Failed to initialize project: error: unknown command &apos;init&apos;

 ❯ initializeProject test/e2e/helpers/setup.ts:37:11
 ❯ test/e2e/cli/create.test.ts:82:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="test/e2e/cli/error-handling.test.ts" timestamp="2025-07-04T09:50:29.106Z" hostname="Carls-MBP-H.home" tests="15" failures="15" errors="0" skipped="0" time="3.763064834">
        <testcase classname="test/e2e/cli/error-handling.test.ts" name="Error Handling E2E &gt; Invalid Commands &gt; should handle unknown commands gracefully" time="0.069522167">
            <failure message="expected &apos;error: unknown command \&apos;unknown-comm…&apos; to contain &apos;Unknown command \&apos;unknown-command\&apos;&apos;" type="AssertionError">
AssertionError: expected &apos;error: unknown command \&apos;unknown-comm…&apos; to contain &apos;Unknown command \&apos;unknown-command\&apos;&apos;

- Expected
+ Received

- Unknown command &apos;unknown-command&apos;
+ error: unknown command &apos;unknown-command&apos;
+

 ❯ test/e2e/cli/error-handling.test.ts:14:29
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/error-handling.test.ts" name="Error Handling E2E &gt; Invalid Commands &gt; should handle missing required arguments" time="0.150074166">
            <failure message="expected +0 to be 1 // Object.is equality" type="AssertionError">
AssertionError: expected +0 to be 1 // Object.is equality

- Expected
+ Received

- 1
+ 0

 ❯ test/e2e/cli/error-handling.test.ts:24:31
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/error-handling.test.ts" name="Error Handling E2E &gt; Invalid Commands &gt; should handle invalid option values" time="0.053228">
            <failure message="expected &apos;error: unknown command \&apos;list\&apos;\n&apos; to contain &apos;Invalid status&apos;" type="AssertionError">
AssertionError: expected &apos;error: unknown command \&apos;list\&apos;\n&apos; to contain &apos;Invalid status&apos;

- Expected
+ Received

- Invalid status
+ error: unknown command &apos;list&apos;
+

 ❯ test/e2e/cli/error-handling.test.ts:32:29
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/error-handling.test.ts" name="Error Handling E2E &gt; File System Errors &gt; should handle missing configuration file" time="0.040793417">
            <failure message="expected &apos;error: unknown command \&apos;get\&apos;\n&apos; to contain &apos;not initialized&apos;" type="AssertionError">
AssertionError: expected &apos;error: unknown command \&apos;get\&apos;\n&apos; to contain &apos;not initialized&apos;

- Expected
+ Received

- not initialized
+ error: unknown command &apos;get&apos;
+

 ❯ test/e2e/cli/error-handling.test.ts:41:29
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/error-handling.test.ts" name="Error Handling E2E &gt; File System Errors &gt; should handle corrupted configuration file" time="0.144339167">
            <failure message="expected &apos;error: unknown command \&apos;get\&apos;\n&apos; to contain &apos;Failed to parse configuration&apos;" type="AssertionError">
AssertionError: expected &apos;error: unknown command \&apos;get\&apos;\n&apos; to contain &apos;Failed to parse configuration&apos;

- Expected
+ Received

- Failed to parse configuration
+ error: unknown command &apos;get&apos;
+

 ❯ test/e2e/cli/error-handling.test.ts:56:29
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/error-handling.test.ts" name="Error Handling E2E &gt; File System Errors &gt; should handle permission errors" time="0.167924333">
            <failure message="ENOENT: no such file or directory, chmod &apos;/var/folders/7t/trzfr2fn2ns8hbcj21s6_f440000gn/T/autoagent-e2e-d9Fycg/.autoagent/config.json&apos;" type="Error">
Error: ENOENT: no such file or directory, chmod &apos;/var/folders/7t/trzfr2fn2ns8hbcj21s6_f440000gn/T/autoagent-e2e-d9Fycg/.autoagent/config.json&apos;
 ❯ test/e2e/cli/error-handling.test.ts:68:7

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errno: -2, code: &apos;ENOENT&apos;, syscall: &apos;chmod&apos;, path: &apos;/var/folders/7t/trzfr2fn2ns8hbcj21s6_f440000gn/T/autoagent-e2e-d9Fycg/.autoagent/config.json&apos; }
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/error-handling.test.ts" name="Error Handling E2E &gt; File System Errors &gt; should handle missing issue files" time="0.178890333">
            <failure message="expected +0 to be 1 // Object.is equality" type="AssertionError">
AssertionError: expected +0 to be 1 // Object.is equality

- Expected
+ Received

- 1
+ 0

 ❯ test/e2e/cli/error-handling.test.ts:85:31
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/error-handling.test.ts" name="Error Handling E2E &gt; Network and Provider Errors &gt; should handle provider timeout" time="0.190688417">
            <failure message="expected +0 to be 1 // Object.is equality" type="AssertionError">
AssertionError: expected +0 to be 1 // Object.is equality

- Expected
+ Received

- 1
+ 0

 ❯ test/e2e/cli/error-handling.test.ts:101:31
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/error-handling.test.ts" name="Error Handling E2E &gt; Network and Provider Errors &gt; should handle provider rate limit" time="0.16423625">
            <failure message="expected +0 to be 1 // Object.is equality" type="AssertionError">
AssertionError: expected +0 to be 1 // Object.is equality

- Expected
+ Received

- 1
+ 0

 ❯ test/e2e/cli/error-handling.test.ts:115:31
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/error-handling.test.ts" name="Error Handling E2E &gt; Network and Provider Errors &gt; should handle provider authentication failure" time="0.180329667">
            <failure message="expected +0 to be 1 // Object.is equality" type="AssertionError">
AssertionError: expected +0 to be 1 // Object.is equality

- Expected
+ Received

- 1
+ 0

 ❯ test/e2e/cli/error-handling.test.ts:129:31
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/error-handling.test.ts" name="Error Handling E2E &gt; Invalid Input Handling &gt; should handle malformed issue files" time="0.184413583">
            <failure message="expected +0 to be 1 // Object.is equality" type="AssertionError">
AssertionError: expected +0 to be 1 // Object.is equality

- Expected
+ Received

- 1
+ 0

 ❯ test/e2e/cli/error-handling.test.ts:142:31
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/error-handling.test.ts" name="Error Handling E2E &gt; Invalid Input Handling &gt; should handle empty issue files" time="0.171316">
            <failure message="expected 1 to be +0 // Object.is equality" type="AssertionError">
AssertionError: expected 1 to be +0 // Object.is equality

- Expected
+ Received

- 0
+ 1

 ❯ test/e2e/cli/error-handling.test.ts:153:31
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/error-handling.test.ts" name="Error Handling E2E &gt; Invalid Input Handling &gt; should handle cyclic dependencies in issues" time="0.188020167">
            <failure message="expected +0 to be 1 // Object.is equality" type="AssertionError">
AssertionError: expected +0 to be 1 // Object.is equality

- Expected
+ Received

- 1
+ 0

 ❯ test/e2e/cli/error-handling.test.ts:171:31
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/error-handling.test.ts" name="Error Handling E2E &gt; Recovery Scenarios &gt; should recover from partial execution" time="1.735962917">
            <failure message="expected &apos;\n📊 Status Report\n\nTotal Issues:  …&apos; to contain &apos;running&apos;" type="AssertionError">
AssertionError: expected &apos;\n📊 Status Report\n\nTotal Issues:  …&apos; to contain &apos;running&apos;

- Expected
+ Received

- running
+
+ 📊 Status Report
+
+ Total Issues:     0
+ Completed:        0
+ Pending:          0
+
+ ✅ Available Providers: claude, gemini
+

 ❯ test/e2e/cli/error-handling.test.ts:193:29
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/error-handling.test.ts" name="Error Handling E2E &gt; Recovery Scenarios &gt; should clean up after failed execution" time="0.142067">
            <failure message="expected +0 to be 1 // Object.is equality" type="AssertionError">
AssertionError: expected +0 to be 1 // Object.is equality

- Expected
+ Received

- 1
+ 0

 ❯ test/e2e/cli/error-handling.test.ts:207:31
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="test/e2e/cli/init.test.ts" timestamp="2025-07-04T09:50:29.109Z" hostname="Carls-MBP-H.home" tests="4" failures="4" errors="0" skipped="0" time="0.343332791">
        <testcase classname="test/e2e/cli/init.test.ts" name="autoagent init &gt; should initialize a new autoagent project" time="0.090511875">
            <failure message="expected 1 to be +0 // Object.is equality" type="AssertionError">
AssertionError: expected 1 to be +0 // Object.is equality

- Expected
+ Received

- 0
+ 1

 ❯ test/e2e/cli/init.test.ts:12:29
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/init.test.ts" name="autoagent init &gt; should not reinitialize if already initialized" time="0.125814875">
            <failure message="expected &apos;error: unknown command \&apos;init\&apos;\n&apos; to contain &apos;already initialized&apos;" type="AssertionError">
AssertionError: expected &apos;error: unknown command \&apos;init\&apos;\n&apos; to contain &apos;already initialized&apos;

- Expected
+ Received

- already initialized
+ error: unknown command &apos;init&apos;
+

 ❯ test/e2e/cli/init.test.ts:28:27
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/init.test.ts" name="autoagent init &gt; should create default configuration" time="0.086021458">
            <failure message="ENOENT: no such file or directory, open &apos;/var/folders/7t/trzfr2fn2ns8hbcj21s6_f440000gn/T/autoagent-e2e-qiKT8b/.autoagent.json&apos;" type="Error">
Error: ENOENT: no such file or directory, open &apos;/var/folders/7t/trzfr2fn2ns8hbcj21s6_f440000gn/T/autoagent-e2e-qiKT8b/.autoagent.json&apos;
 ❯ test/e2e/cli/init.test.ts:35:20

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errno: -2, code: &apos;ENOENT&apos;, syscall: &apos;open&apos;, path: &apos;/var/folders/7t/trzfr2fn2ns8hbcj21s6_f440000gn/T/autoagent-e2e-qiKT8b/.autoagent.json&apos; }
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/init.test.ts" name="autoagent init &gt; should handle non-git directories gracefully" time="0.040098584">
            <failure message="expected 1 to be +0 // Object.is equality" type="AssertionError">
AssertionError: expected 1 to be +0 // Object.is equality

- Expected
+ Received

- 0
+ 1

 ❯ test/e2e/cli/init.test.ts:46:29
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="test/e2e/cli/list.test.ts" timestamp="2025-07-04T09:50:29.110Z" hostname="Carls-MBP-H.home" tests="6" failures="6" errors="0" skipped="0" time="0.59756475">
        <testcase classname="test/e2e/cli/list.test.ts" name="autoagent list &gt; should list all issues" time="0.1341365">
            <failure message="Failed to initialize project: error: unknown command &apos;init&apos;
" type="Error">
Error: Failed to initialize project: error: unknown command &apos;init&apos;

 ❯ initializeProject test/e2e/helpers/setup.ts:37:11
 ❯ test/e2e/cli/list.test.ts:9:5
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/list.test.ts" name="autoagent list &gt; should filter issues by status" time="0.088335459">
            <failure message="Failed to initialize project: error: unknown command &apos;init&apos;
" type="Error">
Error: Failed to initialize project: error: unknown command &apos;init&apos;

 ❯ initializeProject test/e2e/helpers/setup.ts:37:11
 ❯ test/e2e/cli/list.test.ts:24:5
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/list.test.ts" name="autoagent list &gt; should list providers" time="0.094435334">
            <failure message="Failed to initialize project: error: unknown command &apos;init&apos;
" type="Error">
Error: Failed to initialize project: error: unknown command &apos;init&apos;

 ❯ initializeProject test/e2e/helpers/setup.ts:37:11
 ❯ test/e2e/cli/list.test.ts:43:5
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/list.test.ts" name="autoagent list &gt; should show empty list gracefully" time="0.094293125">
            <failure message="Failed to initialize project: error: unknown command &apos;init&apos;
" type="Error">
Error: Failed to initialize project: error: unknown command &apos;init&apos;

 ❯ initializeProject test/e2e/helpers/setup.ts:37:11
 ❯ test/e2e/cli/list.test.ts:53:5
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/list.test.ts" name="autoagent list &gt; should support JSON output format" time="0.090772958">
            <failure message="Failed to initialize project: error: unknown command &apos;init&apos;
" type="Error">
Error: Failed to initialize project: error: unknown command &apos;init&apos;

 ❯ initializeProject test/e2e/helpers/setup.ts:37:11
 ❯ test/e2e/cli/list.test.ts:62:5
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/list.test.ts" name="autoagent list &gt; should list recent executions" time="0.09462275">
            <failure message="Failed to initialize project: error: unknown command &apos;init&apos;
" type="Error">
Error: Failed to initialize project: error: unknown command &apos;init&apos;

 ❯ initializeProject test/e2e/helpers/setup.ts:37:11
 ❯ test/e2e/cli/list.test.ts:76:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="test/e2e/cli/output-formatting.test.ts" timestamp="2025-07-04T09:50:29.112Z" hostname="Carls-MBP-H.home" tests="13" failures="2" errors="0" skipped="11" time="0.096884166">
        <testcase classname="test/e2e/cli/output-formatting.test.ts" name="Output Formatting E2E &gt; Table Output &gt; should format issue list as table" time="0">
            <skipped/>
        </testcase>
        <testcase classname="test/e2e/cli/output-formatting.test.ts" name="Output Formatting E2E &gt; Table Output &gt; should align table columns properly" time="0">
            <skipped/>
        </testcase>
        <testcase classname="test/e2e/cli/output-formatting.test.ts" name="Output Formatting E2E &gt; JSON Output &gt; should format valid JSON when requested" time="0">
            <skipped/>
        </testcase>
        <testcase classname="test/e2e/cli/output-formatting.test.ts" name="Output Formatting E2E &gt; JSON Output &gt; should output pretty-printed JSON" time="0">
            <skipped/>
        </testcase>
        <testcase classname="test/e2e/cli/output-formatting.test.ts" name="Output Formatting E2E &gt; Progress Indicators &gt; should show progress during batch operations" time="0">
            <skipped/>
        </testcase>
        <testcase classname="test/e2e/cli/output-formatting.test.ts" name="Output Formatting E2E &gt; Progress Indicators &gt; should show spinner for long operations" time="0">
            <skipped/>
        </testcase>
        <testcase classname="test/e2e/cli/output-formatting.test.ts" name="Output Formatting E2E &gt; Verbose Output &gt; should show detailed output in verbose mode" time="0">
            <skipped/>
        </testcase>
        <testcase classname="test/e2e/cli/output-formatting.test.ts" name="Output Formatting E2E &gt; Verbose Output &gt; should show debug information with timestamps" time="0">
            <skipped/>
        </testcase>
        <testcase classname="test/e2e/cli/output-formatting.test.ts" name="Output Formatting E2E &gt; Color Output &gt; should use colors when terminal supports it" time="0">
            <skipped/>
        </testcase>
        <testcase classname="test/e2e/cli/output-formatting.test.ts" name="Output Formatting E2E &gt; Color Output &gt; should disable colors when requested" time="0">
            <skipped/>
        </testcase>
        <testcase classname="test/e2e/cli/output-formatting.test.ts" name="Output Formatting E2E &gt; Error Message Formatting &gt; should format error messages clearly" time="0.052187792">
            <failure message="expected +0 to be 1 // Object.is equality" type="AssertionError">
AssertionError: expected +0 to be 1 // Object.is equality

- Expected
+ Received

- 1
+ 0

 ❯ test/e2e/cli/output-formatting.test.ts:165:31
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/output-formatting.test.ts" name="Output Formatting E2E &gt; Error Message Formatting &gt; should show stack traces in debug mode" time="0.043731459">
            <failure message="expected &apos;error: unknown command \&apos;get\&apos;\n&apos; to contain &apos;Error:&apos;" type="AssertionError">
AssertionError: expected &apos;error: unknown command \&apos;get\&apos;\n&apos; to contain &apos;Error:&apos;

- Expected
+ Received

- Error:
+ error: unknown command &apos;get&apos;
+

 ❯ test/e2e/cli/output-formatting.test.ts:177:29
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/output-formatting.test.ts" name="Output Formatting E2E &gt; Summary Output &gt; should show execution summary" time="0">
            <skipped/>
        </testcase>
    </testsuite>
    <testsuite name="test/e2e/cli/status.test.ts" timestamp="2025-07-04T09:50:29.113Z" hostname="Carls-MBP-H.home" tests="6" failures="4" errors="0" skipped="2" time="0.367251209">
        <testcase classname="test/e2e/cli/status.test.ts" name="autoagent status &gt; should show overall project status" time="0.089075958">
            <failure message="Failed to initialize project: error: unknown command &apos;init&apos;
" type="Error">
Error: Failed to initialize project: error: unknown command &apos;init&apos;

 ❯ initializeProject test/e2e/helpers/setup.ts:37:11
 ❯ test/e2e/cli/status.test.ts:9:5
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/status.test.ts" name="autoagent status &gt; should show specific issue status" time="0.089910209">
            <failure message="Failed to initialize project: error: unknown command &apos;init&apos;
" type="Error">
Error: Failed to initialize project: error: unknown command &apos;init&apos;

 ❯ initializeProject test/e2e/helpers/setup.ts:37:11
 ❯ test/e2e/cli/status.test.ts:22:5
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/status.test.ts" name="autoagent status &gt; should show execution history" time="0.088143417">
            <failure message="Failed to initialize project: error: unknown command &apos;init&apos;
" type="Error">
Error: Failed to initialize project: error: unknown command &apos;init&apos;

 ❯ initializeProject test/e2e/helpers/setup.ts:37:11
 ❯ test/e2e/cli/status.test.ts:33:5
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/status.test.ts" name="autoagent status &gt; should show provider statistics" time="0">
            <skipped/>
        </testcase>
        <testcase classname="test/e2e/cli/status.test.ts" name="autoagent status &gt; should handle missing status data gracefully" time="0.099226917">
            <failure message="Failed to initialize project: error: unknown command &apos;init&apos;
" type="Error">
Error: Failed to initialize project: error: unknown command &apos;init&apos;

 ❯ initializeProject test/e2e/helpers/setup.ts:37:11
 ❯ test/e2e/cli/status.test.ts:92:5
            </failure>
        </testcase>
        <testcase classname="test/e2e/cli/status.test.ts" name="autoagent status &gt; should support JSON output format" time="0">
            <skipped/>
        </testcase>
    </testsuite>
    <testsuite name="test/e2e/workflows/complete-lifecycle.test.ts" timestamp="2025-07-04T09:50:29.114Z" hostname="Carls-MBP-H.home" tests="3" failures="3" errors="0" skipped="0" time="0.7421055">
        <testcase classname="test/e2e/workflows/complete-lifecycle.test.ts" name="Complete Issue Lifecycle E2E &gt; should complete full issue lifecycle: create → run → status" time="0.123178375">
            <failure message="expected 1 to be +0 // Object.is equality" type="AssertionError">
AssertionError: expected 1 to be +0 // Object.is equality

- Expected
+ Received

- 0
+ 1

 ❯ test/e2e/workflows/complete-lifecycle.test.ts:12:29
            </failure>
        </testcase>
        <testcase classname="test/e2e/workflows/complete-lifecycle.test.ts" name="Complete Issue Lifecycle E2E &gt; should handle multi-issue batch execution" time="0.32322975">
            <failure message="expected &apos;✓ 🎉 All 0 issues completed successfu…&apos; to match /Running \d+ issues/" type="AssertionError">
AssertionError: expected &apos;✓ 🎉 All 0 issues completed successfu…&apos; to match /Running \d+ issues/

- Expected: 
/Running \d+ issues/

+ Received: 
&quot;✓ 🎉 All 0 issues completed successfully!
&quot;

 ❯ test/e2e/workflows/complete-lifecycle.test.ts:87:27
            </failure>
        </testcase>
        <testcase classname="test/e2e/workflows/complete-lifecycle.test.ts" name="Complete Issue Lifecycle E2E &gt; should support provider switching during execution" time="0.294695625">
            <failure message="expected &apos;📝 No pending issues to execute\n&apos; to contain &apos;Using provider: claude&apos;" type="AssertionError">
AssertionError: expected &apos;📝 No pending issues to execute\n&apos; to contain &apos;Using provider: claude&apos;

- Expected
+ Received

- Using provider: claude
+ 📝 No pending issues to execute
+

 ❯ test/e2e/workflows/complete-lifecycle.test.ts:117:27
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="test/e2e/workflows/configuration-workflow.test.ts" timestamp="2025-07-04T09:50:29.115Z" hostname="Carls-MBP-H.home" tests="4" failures="3" errors="0" skipped="1" time="0.448490333">
        <testcase classname="test/e2e/workflows/configuration-workflow.test.ts" name="Configuration Workflow E2E &gt; should manage global and local configurations" time="0.143249542">
            <failure message="expected 1 to be +0 // Object.is equality" type="AssertionError">
AssertionError: expected 1 to be +0 // Object.is equality

- Expected
+ Received

- 0
+ 1

 ❯ test/e2e/workflows/configuration-workflow.test.ts:18:29
            </failure>
        </testcase>
        <testcase classname="test/e2e/workflows/configuration-workflow.test.ts" name="Configuration Workflow E2E &gt; should support environment variable overrides" time="0.162598709">
            <failure message="expected 1 to be +0 // Object.is equality" type="AssertionError">
AssertionError: expected 1 to be +0 // Object.is equality

- Expected
+ Received

- 0
+ 1

 ❯ test/e2e/workflows/configuration-workflow.test.ts:45:29
            </failure>
        </testcase>
        <testcase classname="test/e2e/workflows/configuration-workflow.test.ts" name="Configuration Workflow E2E &gt; should export and import configurations" time="0">
            <skipped/>
        </testcase>
        <testcase classname="test/e2e/workflows/configuration-workflow.test.ts" name="Configuration Workflow E2E &gt; should validate configuration changes" time="0.141360333">
            <failure message="expected &apos;error: unknown command \&apos;set\&apos;\n&apos; to contain &apos;Invalid value for provider&apos;" type="AssertionError">
AssertionError: expected &apos;error: unknown command \&apos;set\&apos;\n&apos; to contain &apos;Invalid value for provider&apos;

- Expected
+ Received

- Invalid value for provider
+ error: unknown command &apos;set&apos;
+

 ❯ test/e2e/workflows/configuration-workflow.test.ts:85:27
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="test/e2e/workflows/git-integration.test.ts" timestamp="2025-07-04T09:50:29.116Z" hostname="Carls-MBP-H.home" tests="4" failures="4" errors="0" skipped="0" time="0.8789465">
        <testcase classname="test/e2e/workflows/git-integration.test.ts" name="Git Integration Workflow E2E &gt; should track changes in git during execution" time="0.206072541">
            <failure message="Command failed: git commit -m Add autoagent configuration
" type="Error">
Error: Command failed: git commit -m Add autoagent configuration

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { code: 1, killed: false, signal: null, cmd: &apos;git commit -m Add autoagent configuration&apos;, stdout: &apos;On branch main\nnothing to commit, working tree clean\n&apos;, stderr: &apos;&apos; }
            </failure>
        </testcase>
        <testcase classname="test/e2e/workflows/git-integration.test.ts" name="Git Integration Workflow E2E &gt; should create meaningful commit messages" time="0.245644167">
            <failure message="Command failed: git commit -m Initial setup
" type="Error">
Error: Command failed: git commit -m Initial setup

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { code: 1, killed: false, signal: null, cmd: &apos;git commit -m Initial setup&apos;, stdout: &apos;On branch main\nnothing to commit, working tree clean\n&apos;, stderr: &apos;&apos; }
            </failure>
        </testcase>
        <testcase classname="test/e2e/workflows/git-integration.test.ts" name="Git Integration Workflow E2E &gt; should handle uncommitted changes gracefully" time="0.22622375">
            <failure message="Command failed: git commit -m Add configuration
" type="Error">
Error: Command failed: git commit -m Add configuration

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { code: 1, killed: false, signal: null, cmd: &apos;git commit -m Add configuration&apos;, stdout: &apos;On branch main\nnothing to commit, working tree clean\n&apos;, stderr: &apos;&apos; }
            </failure>
        </testcase>
        <testcase classname="test/e2e/workflows/git-integration.test.ts" name="Git Integration Workflow E2E &gt; should support branch-based workflow" time="0.199996542">
            <failure message="Command failed: git commit -m Initial setup
" type="Error">
Error: Command failed: git commit -m Initial setup

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { code: 1, killed: false, signal: null, cmd: &apos;git commit -m Initial setup&apos;, stdout: &apos;On branch main\nnothing to commit, working tree clean\n&apos;, stderr: &apos;&apos; }
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="test/integration/performance/performance-benchmarks.test.ts" timestamp="2025-07-04T09:50:29.117Z" hostname="Carls-MBP-H.home" tests="10" failures="0" errors="0" skipped="0" time="12.808578458">
        <testcase classname="test/integration/performance/performance-benchmarks.test.ts" name="Performance Integration Tests &gt; Concurrent Execution Performance &gt; should measure concurrent vs sequential execution time" time="1.666100708">
        </testcase>
        <testcase classname="test/integration/performance/performance-benchmarks.test.ts" name="Performance Integration Tests &gt; Concurrent Execution Performance &gt; should handle high concurrency levels" time="0.304094584">
        </testcase>
        <testcase classname="test/integration/performance/performance-benchmarks.test.ts" name="Performance Integration Tests &gt; Provider Switching Overhead &gt; should measure failover switching performance" time="0.567567834">
        </testcase>
        <testcase classname="test/integration/performance/performance-benchmarks.test.ts" name="Performance Integration Tests &gt; Provider Switching Overhead &gt; should optimize provider selection based on performance" time="9.073308208">
        </testcase>
        <testcase classname="test/integration/performance/performance-benchmarks.test.ts" name="Performance Integration Tests &gt; Large Issue Processing &gt; should handle large issue batches efficiently" time="0.02044725">
        </testcase>
        <testcase classname="test/integration/performance/performance-benchmarks.test.ts" name="Performance Integration Tests &gt; Large Issue Processing &gt; should optimize file I/O operations" time="0.0250445">
        </testcase>
        <testcase classname="test/integration/performance/performance-benchmarks.test.ts" name="Performance Integration Tests &gt; Memory Usage Patterns &gt; should monitor memory usage during execution" time="0.005448167">
        </testcase>
        <testcase classname="test/integration/performance/performance-benchmarks.test.ts" name="Performance Integration Tests &gt; Memory Usage Patterns &gt; should handle memory-intensive operations efficiently" time="0.112717916">
        </testcase>
        <testcase classname="test/integration/performance/performance-benchmarks.test.ts" name="Performance Integration Tests &gt; Cache Performance &gt; should demonstrate cache effectiveness" time="1.026577959">
        </testcase>
        <testcase classname="test/integration/performance/performance-benchmarks.test.ts" name="Performance Integration Tests &gt; Cache Performance &gt; should implement effective cache eviction" time="0.005757417">
        </testcase>
    </testsuite>
    <testsuite name="test/integration/providers/multi-provider.test.ts" timestamp="2025-07-04T09:50:29.118Z" hostname="Carls-MBP-H.home" tests="9" failures="0" errors="0" skipped="0" time="72.13923575">
        <testcase classname="test/integration/providers/multi-provider.test.ts" name="Multi-Provider Integration Tests &gt; Load Balancing &gt; should distribute load across multiple providers" time="4.53604725">
        </testcase>
        <testcase classname="test/integration/providers/multi-provider.test.ts" name="Multi-Provider Integration Tests &gt; Load Balancing &gt; should handle provider capacity differences" time="6.306368958">
        </testcase>
        <testcase classname="test/integration/providers/multi-provider.test.ts" name="Multi-Provider Integration Tests &gt; Provider Selection Strategies &gt; should select provider based on performance metrics" time="0.35403525">
        </testcase>
        <testcase classname="test/integration/providers/multi-provider.test.ts" name="Multi-Provider Integration Tests &gt; Provider Selection Strategies &gt; should select provider based on success rate" time="30.378721209">
        </testcase>
        <testcase classname="test/integration/providers/multi-provider.test.ts" name="Multi-Provider Integration Tests &gt; Provider Selection Strategies &gt; should implement cost-aware provider selection" time="30.142744542">
        </testcase>
        <testcase classname="test/integration/providers/multi-provider.test.ts" name="Multi-Provider Integration Tests &gt; Concurrent Provider Execution &gt; should execute tasks concurrently across providers" time="0.20808425">
        </testcase>
        <testcase classname="test/integration/providers/multi-provider.test.ts" name="Multi-Provider Integration Tests &gt; Concurrent Provider Execution &gt; should handle partial failures in concurrent execution" time="0.204176583">
        </testcase>
        <testcase classname="test/integration/providers/multi-provider.test.ts" name="Multi-Provider Integration Tests &gt; Provider Synchronization &gt; should maintain consistency across provider switches" time="0.003074708">
        </testcase>
        <testcase classname="test/integration/providers/multi-provider.test.ts" name="Multi-Provider Integration Tests &gt; Provider Synchronization &gt; should handle provider-specific capabilities" time="0.0036435">
        </testcase>
    </testsuite>
    <testsuite name="test/integration/providers/provider-failover.test.ts" timestamp="2025-07-04T09:50:29.119Z" hostname="Carls-MBP-H.home" tests="9" failures="0" errors="0" skipped="0" time="3.27094275">
        <testcase classname="test/integration/providers/provider-failover.test.ts" name="Provider Failover Integration Tests &gt; Rate Limit Failover &gt; should failover from Claude to Gemini when rate limited" time="0.411177">
        </testcase>
        <testcase classname="test/integration/providers/provider-failover.test.ts" name="Provider Failover Integration Tests &gt; Rate Limit Failover &gt; should handle both providers being rate limited" time="0.2068325">
        </testcase>
        <testcase classname="test/integration/providers/provider-failover.test.ts" name="Provider Failover Integration Tests &gt; Rate Limit Failover &gt; should track failover attempts correctly" time="0.202862625">
        </testcase>
        <testcase classname="test/integration/providers/provider-failover.test.ts" name="Provider Failover Integration Tests &gt; Provider Recovery &gt; should retry original provider after rate limit reset" time="0.406273625">
        </testcase>
        <testcase classname="test/integration/providers/provider-failover.test.ts" name="Provider Failover Integration Tests &gt; Provider Recovery &gt; should handle intermittent failures with retry" time="0.203717208">
        </testcase>
        <testcase classname="test/integration/providers/provider-failover.test.ts" name="Provider Failover Integration Tests &gt; Partial Execution Recovery &gt; should resume execution after provider failure mid-task" time="0.408234333">
        </testcase>
        <testcase classname="test/integration/providers/provider-failover.test.ts" name="Provider Failover Integration Tests &gt; Partial Execution Recovery &gt; should maintain execution state across provider switches" time="0.506694458">
        </testcase>
        <testcase classname="test/integration/providers/provider-failover.test.ts" name="Provider Failover Integration Tests &gt; Provider-Specific Error Handling &gt; should handle different error types appropriately" time="0.717606792">
        </testcase>
        <testcase classname="test/integration/providers/provider-failover.test.ts" name="Provider Failover Integration Tests &gt; Provider-Specific Error Handling &gt; should respect provider-specific retry policies" time="0.206131708">
        </testcase>
    </testsuite>
    <testsuite name="test/integration/error-recovery/recovery-scenarios.test.ts" timestamp="2025-07-04T09:50:29.120Z" hostname="Carls-MBP-H.home" tests="13" failures="0" errors="0" skipped="0" time="8.811717041">
        <testcase classname="test/integration/error-recovery/recovery-scenarios.test.ts" name="Error Recovery Integration Tests &gt; Network Failure Recovery &gt; should recover from temporary network failures" time="0.306913709">
        </testcase>
        <testcase classname="test/integration/error-recovery/recovery-scenarios.test.ts" name="Error Recovery Integration Tests &gt; Network Failure Recovery &gt; should handle DNS resolution failures" time="0.385132459">
        </testcase>
        <testcase classname="test/integration/error-recovery/recovery-scenarios.test.ts" name="Error Recovery Integration Tests &gt; Network Failure Recovery &gt; should implement exponential backoff for retries" time="0.708301333">
        </testcase>
        <testcase classname="test/integration/error-recovery/recovery-scenarios.test.ts" name="Error Recovery Integration Tests &gt; File System Error Recovery &gt; should handle permission denied errors" time="0.00467225">
        </testcase>
        <testcase classname="test/integration/error-recovery/recovery-scenarios.test.ts" name="Error Recovery Integration Tests &gt; File System Error Recovery &gt; should handle disk space errors gracefully" time="0.001003583">
        </testcase>
        <testcase classname="test/integration/error-recovery/recovery-scenarios.test.ts" name="Error Recovery Integration Tests &gt; File System Error Recovery &gt; should recover from file lock conflicts" time="0.001267875">
        </testcase>
        <testcase classname="test/integration/error-recovery/recovery-scenarios.test.ts" name="Error Recovery Integration Tests &gt; Git Operation Recovery &gt; should recover from merge conflicts" time="0.180363292">
        </testcase>
        <testcase classname="test/integration/error-recovery/recovery-scenarios.test.ts" name="Error Recovery Integration Tests &gt; Git Operation Recovery &gt; should handle detached HEAD state" time="0.207432833">
        </testcase>
        <testcase classname="test/integration/error-recovery/recovery-scenarios.test.ts" name="Error Recovery Integration Tests &gt; Git Operation Recovery &gt; should recover from interrupted rebase" time="0.001629375">
        </testcase>
        <testcase classname="test/integration/error-recovery/recovery-scenarios.test.ts" name="Error Recovery Integration Tests &gt; Timeout Recovery &gt; should handle operation timeouts gracefully" time="1.004544875">
        </testcase>
        <testcase classname="test/integration/error-recovery/recovery-scenarios.test.ts" name="Error Recovery Integration Tests &gt; Timeout Recovery &gt; should implement progressive timeout strategies" time="6.003535042">
        </testcase>
        <testcase classname="test/integration/error-recovery/recovery-scenarios.test.ts" name="Error Recovery Integration Tests &gt; State Corruption Recovery &gt; should recover from corrupted configuration" time="0.002528458">
        </testcase>
        <testcase classname="test/integration/error-recovery/recovery-scenarios.test.ts" name="Error Recovery Integration Tests &gt; State Corruption Recovery &gt; should handle incomplete execution state" time="0.002552875">
        </testcase>
    </testsuite>
    <testsuite name="test/integration/workflows/batch-execution.test.ts" timestamp="2025-07-04T09:50:29.121Z" hostname="Carls-MBP-H.home" tests="10" failures="0" errors="0" skipped="0" time="1.503355417">
        <testcase classname="test/integration/workflows/batch-execution.test.ts" name="Batch Execution Integration Tests &gt; Multi-Issue Batch Processing &gt; should process multiple issues in sequence" time="1.159991625">
        </testcase>
        <testcase classname="test/integration/workflows/batch-execution.test.ts" name="Batch Execution Integration Tests &gt; Multi-Issue Batch Processing &gt; should handle parallel batch execution" time="0.0053435">
        </testcase>
        <testcase classname="test/integration/workflows/batch-execution.test.ts" name="Batch Execution Integration Tests &gt; Multi-Issue Batch Processing &gt; should respect priority order in batch execution" time="0.002357875">
        </testcase>
        <testcase classname="test/integration/workflows/batch-execution.test.ts" name="Batch Execution Integration Tests &gt; Multi-Issue Batch Processing &gt; should execute batch processing using AutonomousAgent executeAll" time="0.00790225">
        </testcase>
        <testcase classname="test/integration/workflows/batch-execution.test.ts" name="Batch Execution Integration Tests &gt; TODO List Management &gt; should update TODO list during batch execution" time="0.316761875">
        </testcase>
        <testcase classname="test/integration/workflows/batch-execution.test.ts" name="Batch Execution Integration Tests &gt; TODO List Management &gt; should handle TODO dependencies" time="0.001679459">
        </testcase>
        <testcase classname="test/integration/workflows/batch-execution.test.ts" name="Batch Execution Integration Tests &gt; Progress Tracking &gt; should track execution progress accurately" time="0.000965583">
        </testcase>
        <testcase classname="test/integration/workflows/batch-execution.test.ts" name="Batch Execution Integration Tests &gt; Progress Tracking &gt; should generate execution summary report" time="0.000960292">
        </testcase>
        <testcase classname="test/integration/workflows/batch-execution.test.ts" name="Batch Execution Integration Tests &gt; Incremental Execution &gt; should support resuming interrupted batch execution" time="0.00253675">
        </testcase>
        <testcase classname="test/integration/workflows/batch-execution.test.ts" name="Batch Execution Integration Tests &gt; Incremental Execution &gt; should handle partial file updates in batch" time="0.003814417">
        </testcase>
    </testsuite>
    <testsuite name="test/integration/workflows/issue-lifecycle.test.ts" timestamp="2025-07-04T09:50:29.122Z" hostname="Carls-MBP-H.home" tests="8" failures="0" errors="0" skipped="0" time="0.669962041">
        <testcase classname="test/integration/workflows/issue-lifecycle.test.ts" name="Issue Lifecycle Integration Tests &gt; Complete Issue Execution &gt; should execute a simple issue from start to finish" time="0.066386334">
        </testcase>
        <testcase classname="test/integration/workflows/issue-lifecycle.test.ts" name="Issue Lifecycle Integration Tests &gt; Complete Issue Execution &gt; should handle multi-file issue implementation" time="0.080264542">
        </testcase>
        <testcase classname="test/integration/workflows/issue-lifecycle.test.ts" name="Issue Lifecycle Integration Tests &gt; Issue Dependencies &gt; should respect issue dependencies order" time="0.066450667">
        </testcase>
        <testcase classname="test/integration/workflows/issue-lifecycle.test.ts" name="Issue Lifecycle Integration Tests &gt; Issue Dependencies &gt; should detect circular dependencies" time="0.063988125">
        </testcase>
        <testcase classname="test/integration/workflows/issue-lifecycle.test.ts" name="Issue Lifecycle Integration Tests &gt; Git Integration &gt; should create commits for completed issues" time="0.116952916">
        </testcase>
        <testcase classname="test/integration/workflows/issue-lifecycle.test.ts" name="Issue Lifecycle Integration Tests &gt; Git Integration &gt; should handle git workflow with branches" time="0.1434425">
        </testcase>
        <testcase classname="test/integration/workflows/issue-lifecycle.test.ts" name="Issue Lifecycle Integration Tests &gt; Configuration Updates &gt; should persist configuration changes during execution" time="0.062029125">
        </testcase>
        <testcase classname="test/integration/workflows/issue-lifecycle.test.ts" name="Issue Lifecycle Integration Tests &gt; Configuration Updates &gt; should track provider usage patterns" time="0.069493042">
        </testcase>
    </testsuite>
    <testsuite name="test/unit/cli/index.test.ts" timestamp="2025-07-04T09:50:29.123Z" hostname="Carls-MBP-H.home" tests="11" failures="0" errors="0" skipped="0" time="0.010292334">
        <testcase classname="test/unit/cli/index.test.ts" name="CLI Integration Tests &gt; config commands &gt; should initialize config" time="0.001796458">
        </testcase>
        <testcase classname="test/unit/cli/index.test.ts" name="CLI Integration Tests &gt; config commands &gt; should set provider" time="0.000728375">
        </testcase>
        <testcase classname="test/unit/cli/index.test.ts" name="CLI Integration Tests &gt; config commands &gt; should set failover providers" time="0.000707083">
        </testcase>
        <testcase classname="test/unit/cli/index.test.ts" name="CLI Integration Tests &gt; config commands &gt; should update config for auto-commit" time="0.000797958">
        </testcase>
        <testcase classname="test/unit/cli/index.test.ts" name="CLI Integration Tests &gt; config commands &gt; should clear rate limits" time="0.00062425">
        </testcase>
        <testcase classname="test/unit/cli/index.test.ts" name="CLI Integration Tests &gt; run command &gt; should execute single issue" time="0.001461708">
        </testcase>
        <testcase classname="test/unit/cli/index.test.ts" name="CLI Integration Tests &gt; run command &gt; should execute all issues" time="0.000589375">
        </testcase>
        <testcase classname="test/unit/cli/index.test.ts" name="CLI Integration Tests &gt; status command &gt; should get and display status" time="0.000565042">
        </testcase>
        <testcase classname="test/unit/cli/index.test.ts" name="CLI Integration Tests &gt; check command &gt; should check provider availability" time="0.000795709">
        </testcase>
        <testcase classname="test/unit/cli/index.test.ts" name="CLI Integration Tests &gt; create command &gt; should create new issue" time="0.000648792">
        </testcase>
        <testcase classname="test/unit/cli/index.test.ts" name="CLI Integration Tests &gt; bootstrap command &gt; should bootstrap from master plan" time="0.000630834">
        </testcase>
    </testsuite>
    <testsuite name="test/unit/providers/ClaudeProvider.test.ts" timestamp="2025-07-04T09:50:29.124Z" hostname="Carls-MBP-H.home" tests="10" failures="0" errors="0" skipped="0" time="0.011583083">
        <testcase classname="test/unit/providers/ClaudeProvider.test.ts" name="ClaudeProvider &gt; checkAvailability &gt; should return true when claude is available" time="0.002668667">
        </testcase>
        <testcase classname="test/unit/providers/ClaudeProvider.test.ts" name="ClaudeProvider &gt; checkAvailability &gt; should return false when claude is not available" time="0.000635667">
        </testcase>
        <testcase classname="test/unit/providers/ClaudeProvider.test.ts" name="ClaudeProvider &gt; checkAvailability &gt; should handle spawn errors" time="0.000460666">
        </testcase>
        <testcase classname="test/unit/providers/ClaudeProvider.test.ts" name="ClaudeProvider &gt; execute &gt; should execute successfully with JSON output" time="0.001919709">
        </testcase>
        <testcase classname="test/unit/providers/ClaudeProvider.test.ts" name="ClaudeProvider &gt; execute &gt; should handle execution errors" time="0.000771584">
        </testcase>
        <testcase classname="test/unit/providers/ClaudeProvider.test.ts" name="ClaudeProvider &gt; execute &gt; should handle context files correctly" time="0.000995208">
        </testcase>
        <testcase classname="test/unit/providers/ClaudeProvider.test.ts" name="ClaudeProvider &gt; execute &gt; should handle streaming output with file modifications" time="0.001273834">
        </testcase>
        <testcase classname="test/unit/providers/ClaudeProvider.test.ts" name="ClaudeProvider &gt; execute &gt; should handle signal abort" time="0.000622667">
        </testcase>
        <testcase classname="test/unit/providers/ClaudeProvider.test.ts" name="ClaudeProvider &gt; execute &gt; should handle spawn errors during execution" time="0.000595792">
        </testcase>
        <testcase classname="test/unit/providers/ClaudeProvider.test.ts" name="ClaudeProvider &gt; name property &gt; should return correct provider name" time="0.000454958">
        </testcase>
    </testsuite>
    <testsuite name="test/unit/providers/GeminiProvider.test.ts" timestamp="2025-07-04T09:50:29.125Z" hostname="Carls-MBP-H.home" tests="11" failures="0" errors="0" skipped="0" time="0.008249542">
        <testcase classname="test/unit/providers/GeminiProvider.test.ts" name="GeminiProvider &gt; checkAvailability &gt; should return true when gemini is available" time="0.001859416">
        </testcase>
        <testcase classname="test/unit/providers/GeminiProvider.test.ts" name="GeminiProvider &gt; checkAvailability &gt; should return false when gemini is not available" time="0.000368625">
        </testcase>
        <testcase classname="test/unit/providers/GeminiProvider.test.ts" name="GeminiProvider &gt; checkAvailability &gt; should handle spawn errors" time="0.0003585">
        </testcase>
        <testcase classname="test/unit/providers/GeminiProvider.test.ts" name="GeminiProvider &gt; execute &gt; should execute successfully" time="0.001496">
        </testcase>
        <testcase classname="test/unit/providers/GeminiProvider.test.ts" name="GeminiProvider &gt; execute &gt; should handle execution errors" time="0.000617333">
        </testcase>
        <testcase classname="test/unit/providers/GeminiProvider.test.ts" name="GeminiProvider &gt; execute &gt; should collect stderr output" time="0.000431416">
        </testcase>
        <testcase classname="test/unit/providers/GeminiProvider.test.ts" name="GeminiProvider &gt; execute &gt; should handle signal abort" time="0.000508792">
        </testcase>
        <testcase classname="test/unit/providers/GeminiProvider.test.ts" name="GeminiProvider &gt; execute &gt; should detect errors in output" time="0.000588875">
        </testcase>
        <testcase classname="test/unit/providers/GeminiProvider.test.ts" name="GeminiProvider &gt; execute &gt; should handle spawn errors during execution" time="0.000329292">
        </testcase>
        <testcase classname="test/unit/providers/GeminiProvider.test.ts" name="GeminiProvider &gt; execute &gt; should handle empty output" time="0.00043225">
        </testcase>
        <testcase classname="test/unit/providers/GeminiProvider.test.ts" name="GeminiProvider &gt; name property &gt; should return correct provider name" time="0.000287">
        </testcase>
    </testsuite>
    <testsuite name="test/unit/providers/index.test.ts" timestamp="2025-07-04T09:50:29.126Z" hostname="Carls-MBP-H.home" tests="10" failures="0" errors="0" skipped="0" time="0.006225375">
        <testcase classname="test/unit/providers/index.test.ts" name="Provider factory functions &gt; createProvider &gt; should create a ClaudeProvider" time="0.001234208">
        </testcase>
        <testcase classname="test/unit/providers/index.test.ts" name="Provider factory functions &gt; createProvider &gt; should create a GeminiProvider" time="0.000409417">
        </testcase>
        <testcase classname="test/unit/providers/index.test.ts" name="Provider factory functions &gt; createProvider &gt; should throw error for unknown provider" time="0.000760333">
        </testcase>
        <testcase classname="test/unit/providers/index.test.ts" name="Provider factory functions &gt; getFirstAvailableProvider &gt; should return first available provider" time="0.000695667">
        </testcase>
        <testcase classname="test/unit/providers/index.test.ts" name="Provider factory functions &gt; getFirstAvailableProvider &gt; should skip unavailable providers" time="0.000391791">
        </testcase>
        <testcase classname="test/unit/providers/index.test.ts" name="Provider factory functions &gt; getFirstAvailableProvider &gt; should return null if no providers available" time="0.000412667">
        </testcase>
        <testcase classname="test/unit/providers/index.test.ts" name="Provider factory functions &gt; getFirstAvailableProvider &gt; should handle empty provider list" time="0.000330708">
        </testcase>
        <testcase classname="test/unit/providers/index.test.ts" name="Provider factory functions &gt; getFirstAvailableProvider &gt; should handle provider creation errors" time="0.000328292">
        </testcase>
        <testcase classname="test/unit/providers/index.test.ts" name="Provider factory functions &gt; getFirstAvailableProvider &gt; should handle checkAvailability errors" time="0.000359375">
        </testcase>
        <testcase classname="test/unit/providers/index.test.ts" name="Provider factory functions &gt; getFirstAvailableProvider &gt; should use default providers when none specified" time="0.000364917">
        </testcase>
    </testsuite>
    <testsuite name="test/unit/core/autonomous-agent.test.ts" timestamp="2025-07-04T09:50:29.127Z" hostname="Carls-MBP-H.home" tests="19" failures="0" errors="0" skipped="0" time="0.293651959">
        <testcase classname="test/unit/core/autonomous-agent.test.ts" name="AutonomousAgent &gt; constructor &gt; should create an instance with default config" time="0.001528208">
        </testcase>
        <testcase classname="test/unit/core/autonomous-agent.test.ts" name="AutonomousAgent &gt; constructor &gt; should accept custom config" time="0.000761709">
        </testcase>
        <testcase classname="test/unit/core/autonomous-agent.test.ts" name="AutonomousAgent &gt; initialize &gt; should initialize successfully" time="0.000411625">
        </testcase>
        <testcase classname="test/unit/core/autonomous-agent.test.ts" name="AutonomousAgent &gt; initialize &gt; should handle missing git" time="0.000380708">
        </testcase>
        <testcase classname="test/unit/core/autonomous-agent.test.ts" name="AutonomousAgent &gt; initialize &gt; should handle non-git repository" time="0.000408708">
        </testcase>
        <testcase classname="test/unit/core/autonomous-agent.test.ts" name="AutonomousAgent &gt; executeIssue &gt; should execute an issue successfully" time="0.040148833">
        </testcase>
        <testcase classname="test/unit/core/autonomous-agent.test.ts" name="AutonomousAgent &gt; executeIssue &gt; should handle provider failure with fallback" time="0.032242125">
        </testcase>
        <testcase classname="test/unit/core/autonomous-agent.test.ts" name="AutonomousAgent &gt; executeIssue &gt; should emit events during execution" time="0.039580333">
        </testcase>
        <testcase classname="test/unit/core/autonomous-agent.test.ts" name="AutonomousAgent &gt; executeAll &gt; should execute all pending issues" time="0.107285375">
        </testcase>
        <testcase classname="test/unit/core/autonomous-agent.test.ts" name="AutonomousAgent &gt; executeNext &gt; should execute the next pending issue" time="0.032665375">
        </testcase>
        <testcase classname="test/unit/core/autonomous-agent.test.ts" name="AutonomousAgent &gt; executeNext &gt; should return error when no pending issues" time="0.000562542">
        </testcase>
        <testcase classname="test/unit/core/autonomous-agent.test.ts" name="AutonomousAgent &gt; createIssue &gt; should create a new issue" time="0.000598667">
        </testcase>
        <testcase classname="test/unit/core/autonomous-agent.test.ts" name="AutonomousAgent &gt; createIssue &gt; should handle issue creation failure" time="0.000921584">
        </testcase>
        <testcase classname="test/unit/core/autonomous-agent.test.ts" name="AutonomousAgent &gt; getStatus &gt; should return current status" time="0.000488791">
        </testcase>
        <testcase classname="test/unit/core/autonomous-agent.test.ts" name="AutonomousAgent &gt; rollback &gt; should rollback when enabled" time="0.000500125">
        </testcase>
        <testcase classname="test/unit/core/autonomous-agent.test.ts" name="AutonomousAgent &gt; rollback &gt; should handle rollback when disabled" time="0.000332584">
        </testcase>
        <testcase classname="test/unit/core/autonomous-agent.test.ts" name="AutonomousAgent &gt; bootstrap &gt; should bootstrap from master plan" time="0.000715459">
        </testcase>
        <testcase classname="test/unit/core/autonomous-agent.test.ts" name="AutonomousAgent &gt; error handling &gt; should handle provider creation failure" time="0.000551167">
        </testcase>
        <testcase classname="test/unit/core/autonomous-agent.test.ts" name="AutonomousAgent &gt; error handling &gt; should handle concurrent execution attempt" time="0.032463083">
        </testcase>
    </testsuite>
    <testsuite name="test/unit/core/config-manager.test.ts" timestamp="2025-07-04T09:50:29.128Z" hostname="Carls-MBP-H.home" tests="20" failures="0" errors="0" skipped="0" time="0.009158959">
        <testcase classname="test/unit/core/config-manager.test.ts" name="ConfigManager &gt; loadConfig &gt; should load and merge configurations with proper precedence" time="0.001832">
        </testcase>
        <testcase classname="test/unit/core/config-manager.test.ts" name="ConfigManager &gt; loadConfig &gt; should use default config when no files exist" time="0.000472875">
        </testcase>
        <testcase classname="test/unit/core/config-manager.test.ts" name="ConfigManager &gt; loadConfig &gt; should handle invalid JSON gracefully" time="0.000386083">
        </testcase>
        <testcase classname="test/unit/core/config-manager.test.ts" name="ConfigManager &gt; updateConfig &gt; should update local config by default" time="0.000537666">
        </testcase>
        <testcase classname="test/unit/core/config-manager.test.ts" name="ConfigManager &gt; updateConfig &gt; should update global config when specified" time="0.000327125">
        </testcase>
        <testcase classname="test/unit/core/config-manager.test.ts" name="ConfigManager &gt; isProviderRateLimited &gt; should return false when provider is not rate limited" time="0.000325667">
        </testcase>
        <testcase classname="test/unit/core/config-manager.test.ts" name="ConfigManager &gt; isProviderRateLimited &gt; should return true when provider is rate limited within cooldown" time="0.000245084">
        </testcase>
        <testcase classname="test/unit/core/config-manager.test.ts" name="ConfigManager &gt; isProviderRateLimited &gt; should return false when cooldown period has passed" time="0.000187875">
        </testcase>
        <testcase classname="test/unit/core/config-manager.test.ts" name="ConfigManager &gt; updateRateLimit &gt; should add rate limit entry when limiting" time="0.000431209">
        </testcase>
        <testcase classname="test/unit/core/config-manager.test.ts" name="ConfigManager &gt; updateRateLimit &gt; should increment attempts on subsequent rate limits" time="0.000279709">
        </testcase>
        <testcase classname="test/unit/core/config-manager.test.ts" name="ConfigManager &gt; updateRateLimit &gt; should remove rate limit entry when clearing" time="0.000244542">
        </testcase>
        <testcase classname="test/unit/core/config-manager.test.ts" name="ConfigManager &gt; getAvailableProviders &gt; should return all providers when none are rate limited" time="0.000203625">
        </testcase>
        <testcase classname="test/unit/core/config-manager.test.ts" name="ConfigManager &gt; getAvailableProviders &gt; should exclude rate limited providers" time="0.000181292">
        </testcase>
        <testcase classname="test/unit/core/config-manager.test.ts" name="ConfigManager &gt; getAvailableProviders &gt; should return empty array when all providers are rate limited" time="0.000187417">
        </testcase>
        <testcase classname="test/unit/core/config-manager.test.ts" name="ConfigManager &gt; checkRateLimit &gt; should return not limited when no rate limit exists" time="0.000214375">
        </testcase>
        <testcase classname="test/unit/core/config-manager.test.ts" name="ConfigManager &gt; checkRateLimit &gt; should return rate limit details when limited" time="0.000257">
        </testcase>
        <testcase classname="test/unit/core/config-manager.test.ts" name="ConfigManager &gt; getConfig &gt; should return a copy of the current configuration" time="0.000355625">
        </testcase>
        <testcase classname="test/unit/core/config-manager.test.ts" name="ConfigManager &gt; directory handling &gt; should create directories when they do not exist" time="0.000211459">
        </testcase>
        <testcase classname="test/unit/core/config-manager.test.ts" name="ConfigManager &gt; directory handling &gt; should handle EEXIST error when directory already exists" time="0.000577875">
        </testcase>
        <testcase classname="test/unit/core/config-manager.test.ts" name="ConfigManager &gt; directory handling &gt; should throw other errors when creating directories" time="0.000528833">
        </testcase>
    </testsuite>
    <testsuite name="test/unit/core/pattern-analyzer.test.ts" timestamp="2025-07-04T09:50:29.130Z" hostname="Carls-MBP-H.home" tests="10" failures="0" errors="0" skipped="0" time="0.004983917">
        <testcase classname="test/unit/core/pattern-analyzer.test.ts" name="PatternAnalyzer &gt; pattern detection &gt; should detect high success rate pattern" time="0.001457167">
        </testcase>
        <testcase classname="test/unit/core/pattern-analyzer.test.ts" name="PatternAnalyzer &gt; pattern detection &gt; should detect high failure rate pattern" time="0.000401916">
        </testcase>
        <testcase classname="test/unit/core/pattern-analyzer.test.ts" name="PatternAnalyzer &gt; pattern detection &gt; should detect rate limit errors" time="0.000239667">
        </testcase>
        <testcase classname="test/unit/core/pattern-analyzer.test.ts" name="PatternAnalyzer &gt; pattern detection &gt; should detect file type patterns" time="0.000342125">
        </testcase>
        <testcase classname="test/unit/core/pattern-analyzer.test.ts" name="PatternAnalyzer &gt; pattern detection &gt; should detect fast execution pattern" time="0.000200208">
        </testcase>
        <testcase classname="test/unit/core/pattern-analyzer.test.ts" name="PatternAnalyzer &gt; pattern detection &gt; should detect provider-specific patterns" time="0.000299458">
        </testcase>
        <testcase classname="test/unit/core/pattern-analyzer.test.ts" name="PatternAnalyzer &gt; recommendations &gt; should provide recommendations for high failure rate" time="0.000590125">
        </testcase>
        <testcase classname="test/unit/core/pattern-analyzer.test.ts" name="PatternAnalyzer &gt; recommendations &gt; should provide recommendations for rate limits" time="0.000199458">
        </testcase>
        <testcase classname="test/unit/core/pattern-analyzer.test.ts" name="PatternAnalyzer &gt; recommendations &gt; should acknowledge good testing practices" time="0.000234291">
        </testcase>
        <testcase classname="test/unit/core/pattern-analyzer.test.ts" name="PatternAnalyzer &gt; clear &gt; should clear all history and patterns" time="0.00020125">
        </testcase>
    </testsuite>
    <testsuite name="test/unit/core/provider-learning.test.ts" timestamp="2025-07-04T09:50:29.131Z" hostname="Carls-MBP-H.home" tests="7" failures="0" errors="0" skipped="0" time="0.008424208">
        <testcase classname="test/unit/core/provider-learning.test.ts" name="ProviderLearning &gt; updateProviderLearnings &gt; should invoke AI provider to update AGENT.md intelligently" time="0.003266459">
        </testcase>
        <testcase classname="test/unit/core/provider-learning.test.ts" name="ProviderLearning &gt; updateProviderLearnings &gt; should handle failed executions and include error info" time="0.00084025">
        </testcase>
        <testcase classname="test/unit/core/provider-learning.test.ts" name="ProviderLearning &gt; updateProviderLearnings &gt; should accumulate patterns over multiple executions" time="0.000719042">
        </testcase>
        <testcase classname="test/unit/core/provider-learning.test.ts" name="ProviderLearning &gt; updateProviderLearnings &gt; should ignore executions without provider" time="0.000480166">
        </testcase>
        <testcase classname="test/unit/core/provider-learning.test.ts" name="ProviderLearning &gt; updateProviderLearnings &gt; should handle provider not available" time="0.00054275">
        </testcase>
        <testcase classname="test/unit/core/provider-learning.test.ts" name="ProviderLearning &gt; clearCache &gt; should clear cache for specific provider" time="0.001146042">
        </testcase>
        <testcase classname="test/unit/core/provider-learning.test.ts" name="ProviderLearning &gt; clearCache &gt; should clear all caches when no provider specified" time="0.000489042">
        </testcase>
    </testsuite>
    <testsuite name="test/unit/test-helpers/setup.test.ts" timestamp="2025-07-04T09:50:29.131Z" hostname="Carls-MBP-H.home" tests="12" failures="0" errors="0" skipped="0" time="0.012334083">
        <testcase classname="test/unit/test-helpers/setup.test.ts" name="Test Setup Utilities &gt; Custom Matchers &gt; should validate successful execution" time="0.001224417">
        </testcase>
        <testcase classname="test/unit/test-helpers/setup.test.ts" name="Test Setup Utilities &gt; Custom Matchers &gt; should validate failed execution" time="0.000620667">
        </testcase>
        <testcase classname="test/unit/test-helpers/setup.test.ts" name="Test Setup Utilities &gt; Custom Matchers &gt; should validate provider history" time="0.000219833">
        </testcase>
        <testcase classname="test/unit/test-helpers/setup.test.ts" name="Test Setup Utilities &gt; Custom Matchers &gt; should validate issue structure" time="0.0002245">
        </testcase>
        <testcase classname="test/unit/test-helpers/setup.test.ts" name="Test Setup Utilities &gt; Custom Matchers &gt; should find todo items" time="0.000208625">
        </testcase>
        <testcase classname="test/unit/test-helpers/setup.test.ts" name="Test Setup Utilities &gt; Mock Providers &gt; should create successful mock provider" time="0.0009215">
        </testcase>
        <testcase classname="test/unit/test-helpers/setup.test.ts" name="Test Setup Utilities &gt; Mock Providers &gt; should create failing mock provider" time="0.00048825">
        </testcase>
        <testcase classname="test/unit/test-helpers/setup.test.ts" name="Test Setup Utilities &gt; Mock FileSystem &gt; should create mock filesystem with initial files" time="0.00118">
        </testcase>
        <testcase classname="test/unit/test-helpers/setup.test.ts" name="Test Setup Utilities &gt; Mock Process &gt; should create mock spawn with scenarios" time="0.001774">
        </testcase>
        <testcase classname="test/unit/test-helpers/setup.test.ts" name="Test Setup Utilities &gt; TestWorkspace &gt; should create and setup workspace" time="0.0025305">
        </testcase>
        <testcase classname="test/unit/test-helpers/setup.test.ts" name="Test Setup Utilities &gt; TestWorkspace &gt; should create issues in workspace" time="0.001639375">
        </testcase>
        <testcase classname="test/unit/test-helpers/setup.test.ts" name="Test Setup Utilities &gt; Test Factories &gt; should create valid test data" time="0.000317625">
        </testcase>
    </testsuite>
    <testsuite name="test/unit/utils/file-manager.test.ts" timestamp="2025-07-04T09:50:29.132Z" hostname="Carls-MBP-H.home" tests="21" failures="0" errors="0" skipped="0" time="0.008597208">
        <testcase classname="test/unit/utils/file-manager.test.ts" name="FileManager &gt; ensureDirectories &gt; should create issues and plans directories" time="0.001713292">
        </testcase>
        <testcase classname="test/unit/utils/file-manager.test.ts" name="FileManager &gt; getNextIssueNumber &gt; should return 1 for empty directory" time="0.000336417">
        </testcase>
        <testcase classname="test/unit/utils/file-manager.test.ts" name="FileManager &gt; getNextIssueNumber &gt; should return next number based on existing issues" time="0.000279375">
        </testcase>
        <testcase classname="test/unit/utils/file-manager.test.ts" name="FileManager &gt; createIssue &gt; should create issue file with correct content" time="0.000476292">
        </testcase>
        <testcase classname="test/unit/utils/file-manager.test.ts" name="FileManager &gt; createIssue &gt; should handle special characters and dots in titles correctly" time="0.000387041">
        </testcase>
        <testcase classname="test/unit/utils/file-manager.test.ts" name="FileManager &gt; createIssue &gt; should create issue with CLI signature (number, title, content)" time="0.000280875">
        </testcase>
        <testcase classname="test/unit/utils/file-manager.test.ts" name="FileManager &gt; readIssue &gt; should parse issue file correctly" time="0.000381959">
        </testcase>
        <testcase classname="test/unit/utils/file-manager.test.ts" name="FileManager &gt; readIssue &gt; should return null for non-existent file" time="0.000168375">
        </testcase>
        <testcase classname="test/unit/utils/file-manager.test.ts" name="FileManager &gt; createPlan &gt; should create plan file with correct content" time="0.000294916">
        </testcase>
        <testcase classname="test/unit/utils/file-manager.test.ts" name="FileManager &gt; readTodoList &gt; should parse todo list correctly" time="0.0002245">
        </testcase>
        <testcase classname="test/unit/utils/file-manager.test.ts" name="FileManager &gt; readTodoList &gt; should return empty array for non-existent file" time="0.000198583">
        </testcase>
        <testcase classname="test/unit/utils/file-manager.test.ts" name="FileManager &gt; updateTodoList &gt; should write todo list with correct format" time="0.000619375">
        </testcase>
        <testcase classname="test/unit/utils/file-manager.test.ts" name="FileManager &gt; readProviderInstructions &gt; should read provider instructions file" time="0.000218375">
        </testcase>
        <testcase classname="test/unit/utils/file-manager.test.ts" name="FileManager &gt; readProviderInstructions &gt; should return empty string for non-existent file" time="0.000169958">
        </testcase>
        <testcase classname="test/unit/utils/file-manager.test.ts" name="FileManager &gt; createProviderInstructionsIfMissing &gt; should create missing instruction files" time="0.000436209">
        </testcase>
        <testcase classname="test/unit/utils/file-manager.test.ts" name="FileManager &gt; createProviderInstructionsIfMissing &gt; should not create existing files" time="0.000235791">
        </testcase>
        <testcase classname="test/unit/utils/file-manager.test.ts" name="FileManager &gt; createProviderInstructionsIfMissing &gt; should create stub files when symlinks fail" time="0.000388541">
        </testcase>
        <testcase classname="test/unit/utils/file-manager.test.ts" name="FileManager &gt; readFile &gt; should read file with relative path" time="0.000215917">
        </testcase>
        <testcase classname="test/unit/utils/file-manager.test.ts" name="FileManager &gt; readFile &gt; should read file with absolute path" time="0.000185584">
        </testcase>
        <testcase classname="test/unit/utils/file-manager.test.ts" name="FileManager &gt; writeFile &gt; should write file with relative path" time="0.000193833">
        </testcase>
        <testcase classname="test/unit/utils/file-manager.test.ts" name="FileManager &gt; writeFile &gt; should write file with absolute path" time="0.000169625">
        </testcase>
    </testsuite>
    <testsuite name="test/unit/utils/git.test.ts" timestamp="2025-07-04T09:50:29.134Z" hostname="Carls-MBP-H.home" tests="23" failures="0" errors="0" skipped="0" time="0.007326208">
        <testcase classname="test/unit/utils/git.test.ts" name="Git Utilities &gt; checkGitAvailable &gt; should return true when git is available" time="0.001526709">
        </testcase>
        <testcase classname="test/unit/utils/git.test.ts" name="Git Utilities &gt; checkGitAvailable &gt; should return false when git is not available" time="0.000272666">
        </testcase>
        <testcase classname="test/unit/utils/git.test.ts" name="Git Utilities &gt; isGitRepository &gt; should return true when in a git repository" time="0.00028875">
        </testcase>
        <testcase classname="test/unit/utils/git.test.ts" name="Git Utilities &gt; isGitRepository &gt; should return false when not in a git repository" time="0.000241667">
        </testcase>
        <testcase classname="test/unit/utils/git.test.ts" name="Git Utilities &gt; getGitStatus &gt; should return complete git status" time="0.000374334">
        </testcase>
        <testcase classname="test/unit/utils/git.test.ts" name="Git Utilities &gt; getGitStatus &gt; should handle non-git repository" time="0.000204292">
        </testcase>
        <testcase classname="test/unit/utils/git.test.ts" name="Git Utilities &gt; stageAllChanges &gt; should stage all changes" time="0.00028775">
        </testcase>
        <testcase classname="test/unit/utils/git.test.ts" name="Git Utilities &gt; createCommit &gt; should create a commit with message" time="0.000286709">
        </testcase>
        <testcase classname="test/unit/utils/git.test.ts" name="Git Utilities &gt; createCommit &gt; should create a commit with co-author" time="0.000285917">
        </testcase>
        <testcase classname="test/unit/utils/git.test.ts" name="Git Utilities &gt; createCommit &gt; should handle commit failure" time="0.000218666">
        </testcase>
        <testcase classname="test/unit/utils/git.test.ts" name="Git Utilities &gt; getCurrentCommitHash &gt; should return current commit hash" time="0.000206334">
        </testcase>
        <testcase classname="test/unit/utils/git.test.ts" name="Git Utilities &gt; getCurrentCommitHash &gt; should return null when no commits exist" time="0.000167541">
        </testcase>
        <testcase classname="test/unit/utils/git.test.ts" name="Git Utilities &gt; getUncommittedChanges &gt; should return uncommitted changes as patch" time="0.000210208">
        </testcase>
        <testcase classname="test/unit/utils/git.test.ts" name="Git Utilities &gt; getUncommittedChanges &gt; should return empty string on error" time="0.0001605">
        </testcase>
        <testcase classname="test/unit/utils/git.test.ts" name="Git Utilities &gt; hasChangesToCommit &gt; should return true when there are staged changes" time="0.000183833">
        </testcase>
        <testcase classname="test/unit/utils/git.test.ts" name="Git Utilities &gt; hasChangesToCommit &gt; should return true when there are unstaged changes" time="0.000180459">
        </testcase>
        <testcase classname="test/unit/utils/git.test.ts" name="Git Utilities &gt; hasChangesToCommit &gt; should return true when there are untracked files" time="0.000164125">
        </testcase>
        <testcase classname="test/unit/utils/git.test.ts" name="Git Utilities &gt; hasChangesToCommit &gt; should return false when there are no changes" time="0.000149458">
        </testcase>
        <testcase classname="test/unit/utils/git.test.ts" name="Git Utilities &gt; revertToCommit &gt; should revert to specified commit" time="0.000177333">
        </testcase>
        <testcase classname="test/unit/utils/git.test.ts" name="Git Utilities &gt; revertToCommit &gt; should return false on failure" time="0.000150125">
        </testcase>
        <testcase classname="test/unit/utils/git.test.ts" name="Git Utilities &gt; getChangedFiles &gt; should return all changed files" time="0.000204833">
        </testcase>
        <testcase classname="test/unit/utils/git.test.ts" name="Git Utilities &gt; getChangedFiles &gt; should handle duplicates" time="0.000166792">
        </testcase>
        <testcase classname="test/unit/utils/git.test.ts" name="Git Utilities &gt; getChangedFiles &gt; should return empty array on error" time="0.000160542">
        </testcase>
    </testsuite>
    <testsuite name="test/unit/utils/logger.test.ts" timestamp="2025-07-04T09:50:29.136Z" hostname="Carls-MBP-H.home" tests="18" failures="0" errors="0" skipped="0" time="0.008372584">
        <testcase classname="test/unit/utils/logger.test.ts" name="Logger &gt; log levels &gt; should log info messages" time="0.001578584">
        </testcase>
        <testcase classname="test/unit/utils/logger.test.ts" name="Logger &gt; log levels &gt; should log success messages" time="0.000379458">
        </testcase>
        <testcase classname="test/unit/utils/logger.test.ts" name="Logger &gt; log levels &gt; should log error messages" time="0.000319292">
        </testcase>
        <testcase classname="test/unit/utils/logger.test.ts" name="Logger &gt; log levels &gt; should log warning messages" time="0.000287875">
        </testcase>
        <testcase classname="test/unit/utils/logger.test.ts" name="Logger &gt; log levels &gt; should log debug messages when enabled" time="0.000304917">
        </testcase>
        <testcase classname="test/unit/utils/logger.test.ts" name="Logger &gt; log levels &gt; should not log debug messages when disabled" time="0.00035875">
        </testcase>
        <testcase classname="test/unit/utils/logger.test.ts" name="Logger &gt; log levels &gt; should log debug messages with option override" time="0.000244917">
        </testcase>
        <testcase classname="test/unit/utils/logger.test.ts" name="Logger &gt; error handling &gt; should handle Error objects" time="0.000241584">
        </testcase>
        <testcase classname="test/unit/utils/logger.test.ts" name="Logger &gt; error handling &gt; should show stack trace in debug mode" time="0.000332459">
        </testcase>
        <testcase classname="test/unit/utils/logger.test.ts" name="Logger &gt; formatting options &gt; should support message prefix" time="0.000270167">
        </testcase>
        <testcase classname="test/unit/utils/logger.test.ts" name="Logger &gt; formatting options &gt; should support timestamps" time="0.000922625">
        </testcase>
        <testcase classname="test/unit/utils/logger.test.ts" name="Logger &gt; progress bar &gt; should display progress bar" time="0.000279875">
        </testcase>
        <testcase classname="test/unit/utils/logger.test.ts" name="Logger &gt; progress bar &gt; should handle 0% progress" time="0.000616209">
        </testcase>
        <testcase classname="test/unit/utils/logger.test.ts" name="Logger &gt; progress bar &gt; should handle 100% progress" time="0.000288666">
        </testcase>
        <testcase classname="test/unit/utils/logger.test.ts" name="Logger &gt; progress bar &gt; should calculate percentage correctly" time="0.000255167">
        </testcase>
        <testcase classname="test/unit/utils/logger.test.ts" name="Logger &gt; utility methods &gt; should clear screen" time="0.000254583">
        </testcase>
        <testcase classname="test/unit/utils/logger.test.ts" name="Logger &gt; utility methods &gt; should add newline" time="0.000207916">
        </testcase>
        <testcase classname="test/unit/utils/logger.test.ts" name="Logger &gt; global options &gt; should apply default options" time="0.000224667">
        </testcase>
    </testsuite>
    <testsuite name="test/unit/utils/retry.test.ts" timestamp="2025-07-04T09:50:29.137Z" hostname="Carls-MBP-H.home" tests="19" failures="0" errors="0" skipped="0" time="0.011880375">
        <testcase classname="test/unit/utils/retry.test.ts" name="Retry utilities &gt; retry &gt; should succeed on first attempt" time="0.002167166">
        </testcase>
        <testcase classname="test/unit/utils/retry.test.ts" name="Retry utilities &gt; retry &gt; should retry on failure and succeed" time="0.000773625">
        </testcase>
        <testcase classname="test/unit/utils/retry.test.ts" name="Retry utilities &gt; retry &gt; should fail after max attempts" time="0.001428666">
        </testcase>
        <testcase classname="test/unit/utils/retry.test.ts" name="Retry utilities &gt; retry &gt; should use exponential backoff" time="0.000695875">
        </testcase>
        <testcase classname="test/unit/utils/retry.test.ts" name="Retry utilities &gt; retry &gt; should respect maxDelay" time="0.000523542">
        </testcase>
        <testcase classname="test/unit/utils/retry.test.ts" name="Retry utilities &gt; retry &gt; should stop retrying for non-retryable errors" time="0.000703125">
        </testcase>
        <testcase classname="test/unit/utils/retry.test.ts" name="Retry utilities &gt; retry &gt; should detect rate limit errors" time="0.000406833">
        </testcase>
        <testcase classname="test/unit/utils/retry.test.ts" name="Retry utilities &gt; retryWithJitter &gt; should add jitter to delays" time="0.000595125">
        </testcase>
        <testcase classname="test/unit/utils/retry.test.ts" name="Retry utilities &gt; createRetryableFunction &gt; should create a retryable version of a function" time="0.000374083">
        </testcase>
        <testcase classname="test/unit/utils/retry.test.ts" name="Retry utilities &gt; createRetryableFunction &gt; should pass arguments correctly" time="0.000836083">
        </testcase>
        <testcase classname="test/unit/utils/retry.test.ts" name="Retry utilities &gt; isRateLimitError &gt; should detect RateLimitError instances" time="0.000257">
        </testcase>
        <testcase classname="test/unit/utils/retry.test.ts" name="Retry utilities &gt; isRateLimitError &gt; should detect rate limit error messages" time="0.000275666">
        </testcase>
        <testcase classname="test/unit/utils/retry.test.ts" name="Retry utilities &gt; isRateLimitError &gt; should not detect non-rate-limit errors" time="0.00024125">
        </testcase>
        <testcase classname="test/unit/utils/retry.test.ts" name="Retry utilities &gt; extractRetryAfter &gt; should extract retry-after from error message" time="0.000321458">
        </testcase>
        <testcase classname="test/unit/utils/retry.test.ts" name="Retry utilities &gt; extractRetryAfter &gt; should extract from retry-after header format" time="0.000229792">
        </testcase>
        <testcase classname="test/unit/utils/retry.test.ts" name="Retry utilities &gt; extractRetryAfter &gt; should return undefined when no retry time found" time="0.000241083">
        </testcase>
        <testcase classname="test/unit/utils/retry.test.ts" name="Retry utilities &gt; extractRetryAfter &gt; should extract from RateLimitError" time="0.000208708">
        </testcase>
        <testcase classname="test/unit/utils/retry.test.ts" name="Retry utilities &gt; RateLimitError &gt; should create rate limit error with retry time" time="0.000260292">
        </testcase>
        <testcase classname="test/unit/utils/retry.test.ts" name="Retry utilities &gt; RetryError &gt; should create retry error with details" time="0.000241666">
        </testcase>
    </testsuite>
</testsuites>
