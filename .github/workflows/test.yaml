name: Test and Lint

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    name: Test Node ${{ matrix.node-version }} - ${{ matrix.test-suite }}
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [22.x]
        test-suite: [unit, integration]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Install dependencies
      run: npm install
    
    - name: Run linting
      if: matrix.test-suite == 'unit' && matrix.node-version == '22.x'
      run: npm run lint
    
    - name: Build project
      if: matrix.test-suite == 'unit'
      run: npm run build
    
    - name: Run ${{ matrix.test-suite }} tests
      run: npm run test:${{ matrix.test-suite }}
    
    - name: Upload coverage reports to Codecov
      if: matrix.test-suite == 'unit' && matrix.node-version == '22.x'
      uses: codecov/codecov-action@v4
      with:
        directory: ./coverage
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.node-version }}-${{ matrix.test-suite }}
        path: |
          coverage/
          test-results/
        retention-days: 7
  
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Use Node.js 22.x
      uses: actions/setup-node@v4
      with:
        node-version: 22.x
    
    - name: Install dependencies
      run: npm install
    
    - name: Build project
      run: npm run build
    
    - name: Run E2E tests
      run: npm run test:e2e
      timeout-minutes: 30
    
    - name: Upload E2E test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-test-results
        path: test-results/
        retention-days: 7
  
  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    permissions:
      contents: write
      deployments: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Use Node.js 22.x
      uses: actions/setup-node@v4
      with:
        node-version: 22.x
    
    - name: Install dependencies
      run: npm install
    
    - name: Build project
      run: npm run build
    
    - name: Run benchmarks
      run: npm run bench
    
    - name: Transform benchmark results
      run: node scripts/transform-benchmark-results.js bench-results.json bench-results-transformed.json
    
    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      continue-on-error: true
      with:
        tool: 'customBiggerIsBetter'
        output-file-path: bench-results-transformed.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: false
        alert-threshold: '200%'
        comment-always: false
        fail-on-alert: false
        benchmark-data-dir-path: 'dev/bench'
  
  coverage-check:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Use Node.js 22.x
      uses: actions/setup-node@v4
      with:
        node-version: 22.x
    
    - name: Install dependencies
      run: npm install
    
    - name: Build project
      run: npm run build
    
    - name: Check coverage thresholds
      run: npm run test:coverage
    
    - name: Generate coverage report comment
      if: github.event_name == 'pull_request'
      uses: davelosert/vitest-coverage-report-action@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        working-directory: ./
        json-summary-path: ./coverage/coverage-summary.json
        json-final-path: ./coverage/coverage-final.json

  version-check:
    name: Check Version Change
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout PR branch
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check if version was updated
      run: |
        # Get the base branch version
        git fetch origin ${{ github.base_ref }}
        BASE_VERSION=$(git show origin/${{ github.base_ref }}:package.json | grep '"version"' | cut -d '"' -f 4)
        
        # Get the PR branch version
        PR_VERSION=$(grep '"version"' package.json | cut -d '"' -f 4)
        
        echo "Base version: $BASE_VERSION"
        echo "PR version: $PR_VERSION"
        
        if [ "$BASE_VERSION" = "$PR_VERSION" ]; then
          echo "::error::Version in package.json has not been updated. Please update the version number."
          exit 1
        fi
        
        # Verify version format (semantic versioning)
        if ! echo "$PR_VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$' > /dev/null; then
          echo "::error::Invalid version format. Please use semantic versioning (e.g., 1.2.3, 1.2.3-beta.1)"
          exit 1
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 22.x
        
    
    - name: Install dependencies
      run: npm install
    
    - name: Run npm audit
      run: npm audit --production
      continue-on-error: true
    
    - name: Check for known vulnerabilities
      run: |
        npm audit --json --production > audit-report.json || true
        if [ -s audit-report.json ]; then
          echo "Security vulnerabilities found. Please review:"
          cat audit-report.json | jq '.vulnerabilities | to_entries[] | select(.value.severity == "high" or .value.severity == "critical") | {package: .key, severity: .value.severity, via: .value.via[0].title}'
        fi